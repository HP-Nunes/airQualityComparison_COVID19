data$y2 <- cos(data$x)
data$xaxis <- -1.5
data <- as.data.frame(data)
### XKCD theme
theme_xkcd <- theme(
panel.background = element_rect(fill="white"),
axis.ticks = element_line(colour=NA),
panel.grid = element_line(colour="white"),
axis.text.y = element_text(colour=NA),
axis.text.x = element_text(colour="black"),
text = element_text(size=16, family="Humor Sans")
)
### Plot the chart
p <- ggplot(data=data, aes(x=x, y=y1))+
geom_line(aes(y=y2), position="jitter")+
geom_line(colour="white", size=3, position="jitter")+
geom_line(colour="red", size=1, position="jitter")+
geom_text(family="Humor Sans", x=6, y=-1.2, label="A SIN AND COS CURVE")+
geom_line(aes(y=xaxis), position = position_jitter(h = 0.005), colour="black")+
scale_x_continuous(breaks=c(2, 5, 6, 9),
labels = c("YARD", "STEPS", "DOOR", "INSIDE"))+labs(x="", y="")+
theme_xkcd
library(ggplot2)
library(extrafont)
### Already have read in fonts (see previous answer on how to do this)
loadfonts()
### Set up the trial dataset
data <- NULL
data$x <- seq(1, 10, 0.1)
data$y1 <- sin(data$x)
data$y2 <- cos(data$x)
data$xaxis <- -1.5
data <- as.data.frame(data)
### XKCD theme
theme_xkcd <- theme(
panel.background = element_rect(fill="white"),
axis.ticks = element_line(colour=NA),
panel.grid = element_line(colour="white"),
axis.text.y = element_text(colour=NA),
axis.text.x = element_text(colour="black"),
text = element_text(size=16, family="Humor Sans")
)
### Plot the chart
p <- ggplot(data=data, aes(x=x, y=y1))+
geom_line(aes(y=y2), position="jitter")+
geom_line(colour="white", size=3, position="jitter")+
geom_line(colour="red", size=1, position="jitter")+
geom_text(family="Humor Sans", x=6, y=-1.2, label="A SIN AND COS CURVE")+
geom_line(aes(y=xaxis), position = position_jitter(h = 0.005), colour="black")+
scale_x_continuous(breaks=c(2, 5, 6, 9),
labels = c("YARD", "STEPS", "DOOR", "INSIDE"))+labs(x="", y="")+
theme_xkcd
p
data
theme_xkcd
weight <- football_plyweight$weight_pounds
library(readxl)
football_plyweight <- read_excel("Documents/CCSF/Math80/rFiles/football_plyweight.xlsx")
View(football_plyweight)
weight <- football_plyweight$weight_pounds
max <- max(weight)
min <- min(weight)
range <- max(weight) - min(weight)
sturgiss <- 1 + (3.31 * log(80, 10)) # Change the Log's default base to 10. ## Round the number of class to 7.
class_width <- range / 7 # Could round to 28 (closest multiple of 7), but since we're (arbitrarily) rounding to multiple of 10s, we round to 30.
classes <- c(163,193,223,253,283,313,343,373)
output <- cut(weight, breaks = seq(min,max, by=30))
p <-ggplot(football_plyweight, aes(x=weight)) +
geom_histogram(binwidth=30,breaks = classes) +
theme(text = element_text(size = 16, family = "xkcd"))
p
theme_xkcd <- theme(
panel.background = element_rect(fill="white"),
axis.ticks = element_line(colour=NA),
panel.grid = element_line(colour="white"),
axis.text.y = element_text(colour=NA),
axis.text.x = element_text(colour="black"),
text = element_text(size=16, family="Humor Sans")
)
### Plot the chart
p <- ggplot(data=data, aes(x=x, y=y1))+
geom_line(aes(y=y2), position="jitter")+
geom_line(colour="white", size=3, position="jitter")+
geom_line(colour="red", size=1, position="jitter")+
geom_text(family="Humor Sans", x=6, y=-1.2, label="A SIN AND COS CURVE")+
geom_line(aes(y=xaxis), position = position_jitter(h = 0.005), colour="black")+
scale_x_continuous(breaks=c(2, 5, 6, 9),
labels = c("YARD", "STEPS", "DOOR", "INSIDE"))+labs(x="", y="")+
theme_xkcd
p <-ggplot(football_plyweight, aes(x=weight)) +
geom_histogram(binwidth=30,breaks = classes) +
theme(text = element_text(size = 16, family = "xkcd"))
theme_xkcd
p <-ggplot(football_plyweight, aes(x=weight)) +
geom_histogram(binwidth=30,breaks = classes) +
theme(text = element_text(size = 16, family = "xkcd"))
theme_xkcd
p
p <-ggplot(football_plyweight, aes(x=weight)) +
geom_histogram(binwidth=30,breaks = classes))
p <-ggplot(football_plyweight, aes(x=weight)) +
geom_histogram(binwidth=30,breaks = classes)
p <-ggplot(football_plyweight, aes(x=weight)) +
geom_histogram(binwidth=30,breaks = classes)
theme_xkcd
p
p <-ggplot(football_plyweight, aes(x=weight)) +
geom_histogram(binwidth=30,breaks = classes) +
theme(text = element_text(size = 16, family = "xkcd")) +
theme_xkcd
p
p <-ggplot(football_plyweight, aes(x=weight)) +
geom_histogram(binwidth=30,breaks = classes) +
theme_xkcd
p
mapping <- aes(x, y, scale, ratioxy, angleofspine,
+ anglerighthumerus, anglelefthumerus,
+ anglerightradius, angleleftradius,
+ anglerightleg, angleleftleg, angleofneck)
xrange <- range(min(min)-0.1, max(max) + 0.1)
yrange <- range(min(football_plyweight$ymin)+500, max(football_plyweight$ymax) + 1000)
xrange <- range(min(football_plyweight$xmin)-0.1, max(football_plyweight$xmax) + 0.1)
p <-ggplot(football_plyweight, aes(x=weight)) +
geom_histogram(binwidth=30,breaks = classes) +
xkcdrect(mapping,data) + xlab("Year") + ylab("Volunteers at Caritas Spain")
p <-ggplot(football_plyweight, aes(x=weight)) +
geom_histogram(binwidth=30,breaks = classes) +
xkcdrect(mapping,football_plyweight) + xlab("Year") + ylab("Volunteers at Caritas Spain")
mapping <- aes(x, y, scale, ratioxy, angleofspine,
+ anglerighthumerus, anglelefthumerus,
+ anglerightradius, angleleftradius,
+ anglerightleg, angleleftleg, angleofneck)
p <-ggplot(football_plyweight, aes(x=weight)) +
geom_histogram(binwidth=30,breaks = classes) +
xkcdrect(mapping,football_plyweight) + xlab("Year") + ylab("Volunteers at Caritas Spain")
p1
p1 <- hist(weight, breaks = classes, labels = labs,
xlab = "weight (pounds)", ylab = "count",
col = "pink", xlim= c(150,400),
main = 'Frequency Histogram, using Sturgiss rule with Class = 7
Weight of Football Players', w = '30')
p1
data$xmin <- football_plyweight$weight_pounds - 0.1
football_plyweight$weight_pounds - 0.1
data$xmin
football_plyweight$xmin <- football_plyweight$weight_pounds - 0.1
football_plyweight$xmin
football_plyweight$xmin <- football_plyweight$weight_pounds - 0.1
football_plyweight$xmax <- football_plyweight$weight_pounds + 0.1
football_plyweight$ymin <- 0
football_plyweight$ymax <- 20
xrange <- range(min(football_plyweight$xmin)-0.1, max(football_plyweight$xmax) + 0.1)
yrange <- range(min(football_plyweight$ymin)+500, max(football_plyweight$ymax) + 1000)
mapping <- aes(x, y, scale, ratioxy, angleofspine,
+ anglerighthumerus, anglelefthumerus,
+ anglerightradius, angleleftradius,
+ anglerightleg, angleleftleg, angleofneck)
p <-ggplot(football_plyweight, aes(x=weight)) +
geom_histogram(binwidth=30,breaks = classes) +
xkcdrect(mapping,football_plyweight) +
xkcdaxis(xrange,yrange) +
xlab("Weight (pounds)") + ylab("Counts")
p <-ggplot(football_plyweight, aes(x=weight_pounds)) +
geom_histogram(binwidth=30,breaks = classes) +
xkcdrect(mapping,football_plyweight) +
xkcdaxis(xrange,yrange) +
xlab("Weight (pounds)") + ylab("Counts")
p <-ggplot(football_plyweight, aes(x=weight_pounds)) +
xkcdrect(mapping,football_plyweight) +
xkcdaxis(xrange,yrange) +
xlab("Weight (pounds)") + ylab("Counts")
mapping <- aes(xmin=xmin,ymin=ymin,xmax=xmax,ymax=ymax)
p <-ggplot(football_plyweight, aes(x=weight_pounds)) +
xkcdrect(mapping,football_plyweight) +
xkcdaxis(xrange,yrange) +
xlab("Weight (pounds)") + ylab("Counts")
p
install.packages("xkcd",dependencies = TRUE)
install.packages("xkcd", dependencies = TRUE)
p
p <-ggplot(football_plyweight, aes(x=weight_pounds)) +
geom_histogram(binwidth=30,breaks = classes) +
xkcdrect(mapping,football_plyweight) +
xkcdaxis(xrange,yrange) +
xlab("Weight (pounds)") + ylab("Counts")
loadfonts()
library(ggplot2)
library(xkcd)
loadfonts()
p <-ggplot(football_plyweight, aes(x=weight_pounds)) +
geom_histogram(binwidth=30,breaks = classes) +
xkcdrect(mapping,football_plyweight) +
xkcdaxis(xrange,yrange) +
xlab("Weight (pounds)") + ylab("Counts")
p
download.file("http://simonsoftware.se/other/xkcd.ttf",
+ dest="xkcd.ttf", mode="wb")
system("mkdir ~/.fonts")
system("cp xkcd.ttf ~/.fonts")
font_import(pattern = "[X/x]kcd", prompt=FALSE)
fonts()
fonttable()
if(.Platform$OS.type != "unix") {
+ ## Register fonts for Windows bitmap output
+ loadfonts(device="win")
+ } else {
+ loadfonts()
+ }
download.file("http://simonsoftware.se/other/xkcd.ttf", dest="xkcd.ttf", mode="wb")
system("mkdir ~/.fonts")
system("cp xkcd.ttf ~/.fonts")
font_import(pattern = "[X/x]kcd", prompt=FALSE)
fonts()
fonttable()
if(.Platform$OS.type != "unix") {loadfonts(device="win")} else {loadfonts()}
p
p1
hist(weight, breaks = classes, labels = labs,
xlab = "weight (pounds)", ylab = "count",
col = "pink", xlim= c(150,400),
main = 'Frequency Histogram, using Sturgiss rule with Class = 7
Weight of Football Players', w = '30')
football_plyweight$xmin <- football_plyweight$weight_pounds - 0.1
football_plyweight$xmax <- football_plyweight$weight_pounds + 0.1
football_plyweight$ymin <- 0
football_plyweight$ymax <- 20
xrange <- range(min(football_plyweight$xmin)-0.1, max(football_plyweight$xmax) + 0.1)
yrange <- range(min(football_plyweight$ymin), max(football_plyweight$ymax))
mapping <- aes(xmin=xmin,ymin=ymin,xmax=xmax,ymax=ymax)
p <-ggplot(football_plyweight, aes(x=weight_pounds)) +
geom_histogram(binwidth=30,breaks = classes) +
xkcdrect(mapping,football_plyweight) +
xkcdaxis(xrange,yrange) +
xlab("Weight (pounds)") + ylab("Counts")
p
football_plyweight$xmin <- football_plyweight$weight_pounds - 0.1
football_plyweight$xmax <- football_plyweight$weight_pounds + 0.1
football_plyweight$ymin <- 0
football_plyweight$ymax <- 20
xrange <- range(min(football_plyweight$xmin), max(football_plyweight$xmax))
yrange <- range(min(football_plyweight$ymin), max(football_plyweight$ymax))
mapping <- aes(xmin=xmin,ymin=ymin,xmax=xmax,ymax=ymax)
p <-ggplot(football_plyweight, aes(x=weight_pounds)) +
geom_histogram(binwidth=30,breaks = classes) +
xkcdrect(mapping,football_plyweight) +
xkcdaxis(xrange,yrange) +
xlab("Weight (pounds)") + ylab("Counts")
p
p <-ggplot(football_plyweight, aes(x=weight_pounds)) +
xkcdrect(mapping,football_plyweight) +
xkcdaxis(xrange,yrange) +
xlab("Weight (pounds)") + ylab("Counts")
p
p
p``
p1
h
r -v
r -version
r --version
-v
R.Version()
install.packages("flexdashboard")
install.packages(c("checkmate", "dplyr", "Hmisc"))
install.packages(c("checkmate", "dplyr", "Hmisc"))
install.packages(c("checkmate", "dplyr", "Hmisc"))
install.packages(c("checkmate", "dplyr", "Hmisc"))
install.packages(c("checkmate", "dplyr", "Hmisc"))
install.packages(c("checkmate", "dplyr", "Hmisc"))
install.packages(c("checkmate", "dplyr", "Hmisc"))
```{r setup, include=FALSE}
library(flexdashboard)
install.packages("flexdashboard")
library(flexdashboard)
Column {data-width=650}
-----------------------------------------------------------------------
install.packages("shinydashboard")
install.packages("shinydashboard")
library(shinydashboard)
R.Version()
#     install.packages("leaflethex")
install.packages("leaflethex")
install.packages("hexbin")
library(leaflethex)
help(addHexbin)
library(dplyr)
library(dplyr)
library(rnaturalearth)
library(tidyverse)
tidyverse_conflicts()
library(sf)
library(rnaturalearth)
library(dplyr)
library(RColorBrewer)
grid <- st_make_grid(target,
50 * 1000, # Kms
crs = st_crs(initial),
what = "polygons",
square = FALSE # This is the only piece that changes!!!
)
GB <- ne_download(50,
type = "map_subunits",
returnclass = "sf",
destdir = tempdir()
) %>%
subset(CONTINENT == "Europe") %>%
subset(ADM0_A3 == "GBR")
??ne_download
setwd('/home/hp-nunes/dev/repo/R_dataViz')
purpleAir2 <- read.csv("assets/purpleAir_byUniqueLocations.csv")
baaqmdSF <- readOGR(dsn="assets/shp/", layer="baaqmdSF")
library(tidyverse)
library(devtools)
library(geojsonio) # install_version('geojsonio', '0.9.2')
library(RColorBrewer)
library(sp)
library(rgdal)
library(leaflet)
library(leaflet.extras)
library(shiny)
library(geogrid)
library(classInt)
plot(baaqmdSF)
names(baaqmdSF)
pal <- brewer.pal(5,"OrRd")  # we select 5 colors from the palette
# determine the breaks
breaks.qt <- classIntervals(baaqmdSF$PM25, n = 5, style = "sd")
# add a very small value to the top breakpoint, and subtract from the bottom
# for symmetry
br <- breaks.qt$brks
offs <- 1e-07
br[1] <- br[1] - offs
br[length(br)] <- br[length(br)] + offs
spplot(baaqmdSF,"PM25",col.regions = pal, at = br,
main = "PM2.5 Estimations (BAAAQMD)")
baaqmdSF <- readOGR(dsn="assets/shp/", layer="baaqmdSF")
plot(baaqmdSF)
names(baaqmdSF)
pal <- brewer.pal(5,"OrRd")  # we select 5 colors from the palette
# determine the breaks
breaks.qt <- classIntervals(baaqmdSF$PM25, n = 5, style = "sd")
# add a very small value to the top breakpoint, and subtract from the bottom
# for symmetry
br <- breaks.qt$brks
offs <- 1e-07
br[1] <- br[1] - offs
br[length(br)] <- br[length(br)] + offs
spplot(baaqmdSF,"PM25",col.regions = pal, at = br,
main = "PM2.5 Estimations (BAAAQMD)")
GB <- st_transform(baaqmdSF, 3857) %>% select(name)
baaqmdSF
grid <- st_make_grid(baaqmdSF,
50 * 1000, # Kms
crs = st_crs(initial),
what = "polygons",
square = FALSE # This is the only piece that changes!!!
)
grid <- st_make_grid(baaqmdSF,
50 * 1000, # Kms
what = "polygons",
square = FALSE # This is the only piece that changes!!!
)
library(tmap)
library(rvest)     # scraping
library(stringr)   # string manipulation
library(lubridate) # date conversion
library(dplyr)     # data mjnging
library(zoo)       # for locf
library(ggplot2)   # plotting
library(rgdal)     # map stuff
library(rgeos)     # map stuff
library(rvest)     # scraping
library(stringr)   # string manipulation
library(lubridate) # date conversion
library(dplyr)     # data mjnging
library(zoo)       # for locf
library(ggplot2)   # plotting
library(rgdal)     # map stuff
library(rgeos)     # map stuff
install.packages("zoo")
library(zoo)       # for locf
sf <- readOGR("assets/openSF_baaqmd.geojson", "OGRGeoJSON")
setwd('/home/hp-nunes/dev/repo/R_dataViz')
sf <- readOGR("assets/openSF_baaqmd.geojson", "OGRGeoJSON")
library(tidyverse)
library(h3jsr) ## https://github.com/obrl-soil/h3jsr
library(mapdeck)
library(sf)
install.packages("h3jsr")
install.packages("mapdeck")
remotes::install_github("obrl-soil/h3jsr")
library(h3jsr) ## https://github.com/obrl-soil/h3jsr
H3_RESOLUTION <-4
purpleAir2 <- read.csv("assets/purpleAir_byUniqueLocations.csv")
baaqmdSF <- readOGR(dsn="assets/shp/", layer="baaqmdSF")
H3_RESOLUTION <-4
??sf
??sf::st_point
??sf::st_sfc
lon_lat_to_point <- function(lon, lat) {
purrr::map2(
lon,
lat,
~ sf::st_point(c(.x, .y))
) %>%
sf::st_sfc(crs = 7131)
}
purpleAir_hexbinned <-
purpleAir2 %>%
mutate(
location = lon_lat_to_point(
Longitude,
Latitude
),
h3_index = point_to_h3(
location,
H3_RESOLUTION
)
) %>%
group_by(h3_index) %>%
summarise(n_crashes = n()) %>%
mutate(outline = h3jsr::h3_to_polygon(h3_index)) %>%
st_sf(crs = 7131) ## lon lat Coordinate Reference System
lon_lat_to_point <- function(lon, lat) {
purrr::map2(
lon,
lat,
~ sf::st_point(c(.x, .y))
) %>%
sf::st_sfc(crs = 4326)
}
purpleAir_hexbinned <-
purpleAir2 %>%
mutate(
location = lon_lat_to_point(
Longitude,
Latitude
),
h3_index = point_to_h3(
location,
H3_RESOLUTION
)
) %>%
group_by(h3_index) %>%
summarise(n_crashes = n()) %>%
mutate(outline = h3jsr::h3_to_polygon(h3_index)) %>%
st_sf(crs = 4326) ## lon lat Coordinate Reference System
purpleAir_hexbinned
MAPBOX_TOKEN <- "pk.eyJ1IjoiaHAtbnVuZXMiLCJhIjoiY2pqNHAxaHIxMDA3aTNrbW15OGx2NW4ybiJ9.pHzT2FAtpO-Xhnc3PzJsFA"
purpleAir_hexbinned %>%
mutate(log_crashes = log(n_crashes)) %>% ## makes hex colours a bit more interesting
mapdeck(
style = mapdeck_style("dark"),
token = Sys.getenv(MAPBOX_TOKEN),
height = "100vh"
) %>%
add_polygon(fill_colour = "log_crashes")
purpleAir_hexbinned %>%
mutate(log_crashes = log(n_crashes)) %>% ## makes hex colours a bit more interesting
mapdeck(
token = Sys.getenv(MAPBOX_TOKEN),
height = "100vh"
) %>%
add_polygon(fill_colour = "log_crashes")
library(mapdeck)
purpleAir_hexbinned %>%
mutate(log_crashes = log(n_crashes)) %>% ## makes hex colours a bit more interesting
mapdeck(
style = mapdeck_style("dark"),
token = Sys.getenv(MAPBOX_TOKEN),
height = "100vh"
) %>%
add_polygon(fill_colour = "log_crashes")
m <- purpleAir_hexbinned %>%
mutate(log_crashes = log(n_crashes)) %>% ## makes hex colours a bit more interesting
mapdeck(
style = mapdeck_style("dark"),
token = Sys.getenv(MAPBOX_TOKEN),
height = "100vh"
) %>%
add_polygon(fill_colour = "log_crashes")
m
m <- purpleAir_hexbinned %>%
mutate(log_crashes = log(n_crashes)) %>% ## makes hex colours a bit more interesting
mapdeck(
style = mapdeck_style("dark"),
token = Sys.getenv(MAPBOX_TOKEN),
height = "100vh"
) %>%
add_polygon(fill_colour = "log_crashes")
MAPBOX_TOKEN <- "pk.eyJ1IjoiaHAtbnVuZXMiLCJhIjoiY2s5MGJhemRyMjJheTNmbnYzc28xOTZmOCJ9.A3bklT693sZsZ4-7pdYP-g"
purpleAir_hexbinned %>%
mutate(log_crashes = log(n_crashes)) %>% ## makes hex colours a bit more interesting
mapdeck(
style = mapdeck_style("dark"),
token = Sys.getenv(MAPBOX_TOKEN),
height = "100vh"
) %>%
add_polygon(fill_colour = "log_crashes")
MAPBOX_TOKEN <- "pk.eyJ1IjoiaHAtbnVuZXMiLCJhIjoiY2pqNHAxaHIxMDA3aTNrbW15OGx2NW4ybiJ9.pHzT2FAtpO-Xhnc3PzJsFA"
purpleAir_hexbinned %>%
mutate(log_crashes = log(n_crashes)) %>% ## makes hex colours a bit more interesting
mapdeck(
style = mapdeck_style("dark"),
token = Sys.getenv(MAPBOX_TOKEN),
height = "100vh"
) %>%
add_polygon(fill_colour = "log_crashes")
remotes::install_github("milesmcbain/capsule")
capsule::run_callr(function() source("./hexbin.R"))
renv::consent()
capsule::run_callr(function() source("./hexbin.R"))
